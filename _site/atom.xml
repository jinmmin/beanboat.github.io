<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-30T21:08:17-08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Bean Boat</title><subtitle>Bean Boat!</subtitle><author><name>Minmin Jin</name></author><entry><title type="html">Hash Schemes and Extendible Hashing</title><link href="http://localhost:4000/2022/12/30/extendible-hashing.html" rel="alternate" type="text/html" title="Hash Schemes and Extendible Hashing" /><published>2022-12-30T00:00:00-08:00</published><updated>2022-12-30T00:00:00-08:00</updated><id>http://localhost:4000/2022/12/30/extendible-hashing</id><content type="html" xml:base="http://localhost:4000/2022/12/30/extendible-hashing.html"><![CDATA[<p>Hash table is a common data structure that uses a <a href="https://en.wikipedia.org/wiki/Hash_function">hash function</a> to compute an index into an array of buckets, from which the desired the value can be found<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>. When designing a hash table, below decisions need to be considered:</p>
<ul>
  <li><strong>Hash Function</strong>: used to map a large key space into a smaller domain. Trade-offs need to be made between the compute speed and the collision rate. For example, cryptographic hash functions have very low collision rate but is usually slow.</li>
  <li><strong>Hashing Scheme</strong>: used to handle key collisions after hashing. Common approaches include having a large hash table, or dynamically shuffling the keys.</li>
</ul>

<p>This post goes through some common hashing schemes, and uses Extendible Hashing as an example for more detailed explanation and implementation.</p>

<h3 id="linear-probe-hashing">Linear Probe Hashing</h3>
<p><a href="https://en.wikipedia.org/wiki/Linear_probing">Linear Probing</a> is one form of <a href="https://en.wikipedia.org/wiki/Open_addressing">open addressing</a>. It resolves collisions by linearly searching for the next free slot in the table. Linear probing is to unevenly distributed hash values, so a high-quality hash function such as <a href="https://en.wikipedia.org/wiki/MurmurHash">MurmurHash</a> is necessary to achieve good performance.</p>

<h3 id="robin-hood-hashing">Robin Hood Hashing</h3>
<p>Robin Hood Hashing is a variant of linear probe hashing. When new keys are inserted, old keys may be shifted if the new key is farther away from its optimal position than the old key, so as to keep all keys reasonably close to the slot they originally hash to.</p>

<h3 id="cuckoo-hashing">Cuckoo Hashing</h3>
<p><a href="https://en.wikipedia.org/wiki/Cuckoo_hashing">Cuckoo Hashing</a> handles collisions by pushing existing keys to another location in the table, resembling the way a cuckoo chick pushes other eggs out of the nest. Cuckoo hashing is commonly implemented using two hash functions and two arrays.</p>

<h4 id="insert">Insert</h4>
<p>A new element is always inserted in the first table. If a collision occurs, the existing key is moved to the second table. If that causes another collision, the second existing key is moved to the first table. This continues until all collisions are handled. The performance degrades with the increasing load factor.</p>
<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vSPlW7_hIwrTd2dw9mDLtjWfZI_-SD9JTeAr-GyiaqGmw3G10mC3jXIDxyaSDuBcqQIe8unOH_mOwQm/embed?start=true&amp;loop=true&amp;delayms=1000" frameborder="0" width="600" height="366" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>

<h4 id="lookup">Lookup</h4>
<p>If a key exists, it will be stored in either the first array or the second one. So with at most two lookups, we can figure out if the key exists or not.</p>

<h3 id="chained-hashing">Chained Hashing</h3>
<p>Chained Hashing maintains a linked list of buckets for each slot in the hash table, and puts all elements with the same hash key into the same bucket. To determine whether a key exists, it retrieves the bucket and do a linear scan.</p>

<h3 id="extendible-hashing">Extendible Hashing</h3>
<p><a href="https://en.wikipedia.org/wiki/Extendible_hashing">Extendible Hashing</a> is a variant of chained hashing. Instead of letting the linked list grow infinitely, it splits the buckets.</p>

<p>Frequently used terms in Extendible Hashing:</p>
<ul>
  <li><strong>Directory</strong>: used to store the addresses of buckets in pointers. The hash function returns the directory id that points to the bucket for the hash key. The number of directories increases always by doubling.</li>
  <li><strong>Bucket</strong>: used to store actual data. More than one pointers in the directory may point to one bucket. Buckets have a predefined capacity, and when the number of elements in a bucket exceeds the capacity, the bucket overflows and will need a split.</li>
  <li><strong>Global Depth</strong>: associated with directories. Denotes the number of bits to use in the hash function result for categorizing the bucket. It is more efficient to use the <a href="https://en.wikipedia.org/wiki/Bit_numbering#Bit_significance_and_indexing">LSB</a> when expanding the table, as the entire directory can be copied as one block. <code class="language-plaintext highlighter-rouge">Number of Directories = 2^Global Depth</code>. Global Depth increments when the number of directory expands.</li>
  <li><strong>Local Depth</strong>:  associated with buckets. Used to decide the action to be performed in case of bucket overflow. Local depth increments when bucket splits. Local Depth is always less than or equal to the Global Depth.</li>
</ul>

<h4 id="insert-1">Insert</h4>
<p>Below are steps to insert elements</p>
<ol>
  <li>Convert the key to binary format using an appropriate hash function.</li>
  <li>Identify the directory. The directory id is the GlobalDepth number of <a href="https://en.wikipedia.org/wiki/Bit_numbering#Bit_significance_and_indexing">LSB</a>s in the binary number. E.g. the binary obtained is <code class="language-plaintext highlighter-rouge">11001</code> and the GlobalDepth is 3, the directory id is 3 LSBs of 11001 viz. 001.</li>
  <li>Insert and check overflow. If bucket overflows,
    <ol>
      <li>Local Depth &lt; Global Depth: split the bucket, increment the local depth by 1, assign the pointer to the new bucket, redistribute the elements in the existing bucket.</li>
      <li>Local Depth == Global Depth: expand the directory first, and do the bucket split.</li>
    </ol>
  </li>
</ol>

<p>Below example shows the insert process.</p>
<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vRm51fSgFRiYLW-fefSPXLFuUGDQnt8i0hXltPHdWJUhX__IPR1V6JEjcmRNg3kmTb4Rp011Om0SRk7/embed?start=true&amp;loop=true&amp;delayms=1000" frameborder="0" width="600" height="366" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>

<h4 id="implementation">Implementation</h4>

<p>An example implementation based on <a href="https://15445.courses.cs.cmu.edu/fall2022/">CMU 15-445/645 Database Systems</a>.</p>

<details><summary>Bucket</summary>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">K</span><span class="p">,</span> <span class="k">typename</span> <span class="nc">V</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">Bucket</span> <span class="p">{</span>
 <span class="nl">public:</span>
  <span class="n">Bucket</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="n">size_</span><span class="p">(</span><span class="n">size</span><span class="p">),</span> <span class="n">depth_</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="p">{}</span>

  <span class="k">auto</span> <span class="n">GetDepth</span><span class="p">()</span> <span class="k">const</span> <span class="o">-&gt;</span> <span class="kt">int</span> <span class="p">{</span> <span class="k">return</span> <span class="n">depth_</span><span class="p">;</span> <span class="p">}</span>

  <span class="kt">void</span> <span class="n">IncrementDepth</span><span class="p">()</span> <span class="p">{</span> <span class="n">depth_</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>

  <span class="k">auto</span> <span class="n">GetItems</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span> <span class="p">{</span> <span class="k">return</span> <span class="n">list_</span><span class="p">;</span> <span class="p">}</span>

  <span class="k">auto</span> <span class="n">Find</span><span class="p">(</span><span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span><span class="n">key</span><span class="p">,</span> <span class="n">V</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">item</span> <span class="o">:</span> <span class="n">list_</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">first</span> <span class="o">==</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">auto</span> <span class="n">Remove</span><span class="p">(</span><span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span><span class="n">key</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">list_</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">list_</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">==</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
        <span class="o">*</span><span class="n">it</span> <span class="o">=</span> <span class="n">list_</span><span class="p">.</span><span class="n">back</span><span class="p">();</span>
        <span class="n">list_</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">it</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">auto</span> <span class="n">Insert</span><span class="p">(</span><span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span><span class="n">key</span><span class="p">,</span> <span class="k">const</span> <span class="n">V</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">list_</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">list_</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">==</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">it</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">list_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="n">size_</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">list_</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>

 <span class="nl">private:</span>
  <span class="kt">size_t</span> <span class="n">size_</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">depth_</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">list_</span><span class="p">;</span>
<span class="p">};</span></code></pre></figure>

</details>

<details><summary>ExtendibleHashTable</summary>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">K</span><span class="p">,</span> <span class="k">typename</span> <span class="nc">V</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">ExtendibleHashTable</span> <span class="p">{</span>
 <span class="nl">public:</span>
  <span class="k">explicit</span> <span class="n">ExtendibleHashTable</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">bucket_size</span><span class="p">)</span>
      <span class="o">:</span> <span class="n">global_depth_</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">bucket_size_</span><span class="p">(</span><span class="n">bucket_size</span><span class="p">),</span> <span class="n">num_buckets_</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{}</span>

  <span class="k">auto</span> <span class="n">GetGlobalDepth</span><span class="p">()</span> <span class="k">const</span> <span class="o">-&gt;</span> <span class="kt">int</span> <span class="p">{</span> <span class="k">return</span> <span class="n">global_depth_</span><span class="p">;</span> <span class="p">}</span>

  <span class="k">auto</span> <span class="n">GetLocalDepth</span><span class="p">(</span><span class="kt">int</span> <span class="n">dir_index</span><span class="p">)</span> <span class="k">const</span> <span class="o">-&gt;</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">dir_</span><span class="p">[</span><span class="n">dir_index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">GetDepth</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="k">auto</span> <span class="n">Find</span><span class="p">(</span><span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span><span class="n">key</span><span class="p">,</span> <span class="n">V</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="kt">size_t</span> <span class="n">index</span> <span class="o">=</span> <span class="n">IndexOf</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">&gt;=</span> <span class="n">dir_</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">dir_</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">Find</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kt">void</span> <span class="n">Insert</span><span class="p">(</span><span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span><span class="n">key</span><span class="p">,</span> <span class="k">const</span> <span class="n">V</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">GetGlobalDepth</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">dir_</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Bucket</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">bucket_size_</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
      <span class="n">dir_</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Bucket</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">bucket_size_</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
      <span class="n">global_depth_</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">size_t</span> <span class="n">index</span> <span class="o">=</span> <span class="n">IndexOf</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">dir_</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">Insert</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Bucket overflows.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">GetLocalDepth</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">==</span> <span class="n">GetGlobalDepth</span><span class="p">())</span> <span class="p">{</span>
      <span class="c1">// Expand the directory by copying the existing directory to the end.</span>
      <span class="kt">size_t</span> <span class="n">current_size</span> <span class="o">=</span> <span class="n">dir_</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">current_size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">dir_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">dir_</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
      <span class="p">}</span>
      <span class="n">global_depth_</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">dir_</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">IncrementDepth</span><span class="p">();</span>

    <span class="c1">// Split the bucket</span>
    <span class="kt">size_t</span> <span class="n">aindex</span> <span class="o">=</span> <span class="p">(</span><span class="n">index</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">global_depth_</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)))</span> <span class="o">%</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">global_depth_</span><span class="p">);</span>
    <span class="c1">// Make the other directory point to a new bucket</span>
    <span class="n">dir_</span><span class="p">[</span><span class="n">aindex</span><span class="p">]</span> <span class="o">=</span>
        <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Bucket</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">bucket_size_</span><span class="p">,</span> <span class="n">dir_</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">GetDepth</span><span class="p">());</span>
    <span class="n">bucket_size_</span><span class="o">++</span><span class="p">;</span>

    <span class="c1">// Redistribute the existing bucket</span>
    <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">dir_</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">GetItems</span><span class="p">().</span><span class="n">begin</span><span class="p">();</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">dir_</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">GetItems</span><span class="p">().</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">IndexOf</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">)</span> <span class="o">!=</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Move to the new bucket and remove from the existing bucket</span>
        <span class="n">dir_</span><span class="p">[</span><span class="n">aindex</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">Insert</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">,</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="o">==</span> <span class="o">--</span><span class="n">dir_</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">GetItems</span><span class="p">().</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span>
          <span class="n">dir_</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">GetItems</span><span class="p">().</span><span class="n">pop_back</span><span class="p">();</span>
          <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="o">*</span><span class="n">it</span> <span class="o">=</span> <span class="n">dir_</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">GetItems</span><span class="p">().</span><span class="n">back</span><span class="p">();</span>
        <span class="n">dir_</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">GetItems</span><span class="p">().</span><span class="n">pop_back</span><span class="p">();</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">it</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">Insert</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">auto</span> <span class="n">Remove</span><span class="p">(</span><span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span><span class="n">key</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="kt">size_t</span> <span class="n">index</span> <span class="o">=</span> <span class="n">IndexOf</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">&gt;=</span> <span class="n">dir_</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">dir_</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">Remove</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
  <span class="p">}</span>

 <span class="nl">private:</span>
  <span class="k">auto</span> <span class="n">IndexOf</span><span class="p">(</span><span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span><span class="n">key</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">size_t</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">mask</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">global_depth_</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">hash</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span><span class="p">()(</span><span class="n">key</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">mask</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kt">int</span> <span class="n">global_depth_</span><span class="p">;</span>    <span class="c1">// The global depth of the directory</span>
  <span class="kt">size_t</span> <span class="n">bucket_size_</span><span class="p">;</span>  <span class="c1">// The size of a bucket</span>
  <span class="kt">int</span> <span class="n">num_buckets_</span><span class="p">;</span>     <span class="c1">// The number of buckets in the hash table</span>
  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Bucket</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;&gt;&gt;</span>
      <span class="n">dir_</span><span class="p">;</span>  <span class="c1">// The directory of the hash table</span>
<span class="p">};</span></code></pre></figure>

</details>

<details><summary>Unit test</summary>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">TEST</span><span class="p">(</span><span class="n">ExtendibleHashTableTest</span><span class="p">,</span> <span class="n">BasicTest</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">auto</span> <span class="n">table</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">ExtendibleHashTable</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

  <span class="n">table</span><span class="o">-&gt;</span><span class="n">Insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"a"</span><span class="p">);</span>
  <span class="n">table</span><span class="o">-&gt;</span><span class="n">Insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">"b"</span><span class="p">);</span>
  <span class="n">table</span><span class="o">-&gt;</span><span class="n">Insert</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">"c"</span><span class="p">);</span>
  <span class="n">table</span><span class="o">-&gt;</span><span class="n">Insert</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="s">"d"</span><span class="p">);</span>
  <span class="n">table</span><span class="o">-&gt;</span><span class="n">Insert</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="s">"e"</span><span class="p">);</span>
  <span class="n">table</span><span class="o">-&gt;</span><span class="n">Insert</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="s">"f"</span><span class="p">);</span>
  <span class="n">table</span><span class="o">-&gt;</span><span class="n">Insert</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="s">"g"</span><span class="p">);</span>
  <span class="n">table</span><span class="o">-&gt;</span><span class="n">Insert</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">"h"</span><span class="p">);</span>
  <span class="n">table</span><span class="o">-&gt;</span><span class="n">Insert</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="s">"i"</span><span class="p">);</span>
  <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">GetLocalDepth</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
  <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">GetLocalDepth</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
  <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">GetLocalDepth</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
  <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">table</span><span class="o">-&gt;</span><span class="n">GetLocalDepth</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>

  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">result</span><span class="p">;</span>
  <span class="n">table</span><span class="o">-&gt;</span><span class="n">Find</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
  <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="s">"i"</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
  <span class="n">table</span><span class="o">-&gt;</span><span class="n">Find</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
  <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="s">"h"</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
  <span class="n">table</span><span class="o">-&gt;</span><span class="n">Find</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
  <span class="n">EXPECT_EQ</span><span class="p">(</span><span class="s">"b"</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
  <span class="n">EXPECT_FALSE</span><span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">Find</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">result</span><span class="p">));</span>

  <span class="n">EXPECT_TRUE</span><span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">Remove</span><span class="p">(</span><span class="mi">8</span><span class="p">));</span>
  <span class="n">EXPECT_TRUE</span><span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">Remove</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span>
  <span class="n">EXPECT_TRUE</span><span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">Remove</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
  <span class="n">EXPECT_FALSE</span><span class="p">(</span><span class="n">table</span><span class="o">-&gt;</span><span class="n">Remove</span><span class="p">(</span><span class="mi">20</span><span class="p">));</span>
<span class="p">}</span></code></pre></figure>

</details>

<h3 id="linear-hashing">Linear Hashing</h3>
<p><a href="https://en.wikipedia.org/wiki/Linear_hashing">Linear hashing</a> keeps a pointer to track the next bucket to split, and uses multiple hashes to find the right bucket for a given key. When a bucket overflows, the bucket is split into the pointer location. Different overflow criterions can be used, e.g. load factor.</p>

<h2 id="references">References</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>https://en.wikipedia.org/wiki/Hash_table <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Minmin Jin</name></author><category term="computer_science" /><category term="data_structure" /><summary type="html"><![CDATA[Hash table is a common data structure that uses a hash function to compute an index into an array of buckets, from which the desired the value can be found1. When designing a hash table, below decisions need to be considered: Hash Function: used to map a large key space into a smaller domain. Trade-offs need to be made between the compute speed and the collision rate. For example, cryptographic hash functions have very low collision rate but is usually slow. Hashing Scheme: used to handle key collisions after hashing. Common approaches include having a large hash table, or dynamically shuffling the keys. https://en.wikipedia.org/wiki/Hash_table &#8617;]]></summary></entry><entry><title type="html">Building a Miniature Study Room</title><link href="http://localhost:4000/2022/12/04/building-a-miniature-study-room.html" rel="alternate" type="text/html" title="Building a Miniature Study Room" /><published>2022-12-04T00:00:00-08:00</published><updated>2022-12-04T00:00:00-08:00</updated><id>http://localhost:4000/2022/12/04/building-a-miniature-study-room</id><content type="html" xml:base="http://localhost:4000/2022/12/04/building-a-miniature-study-room.html"><![CDATA[<p>I bought a <a href="https://www.amazon.com/gp/product/B06X3VNJBZ/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;th=1">DIY set</a> for Zoltan several years ago. But because of its complexity and the time it would take to do it, he never had the chance to start on it. On a cold winter night, I decided to try it since I have never done this kind of modeling before. It turned out to a big time sucker. I finished on and off after two weeks, totaling two full days on it.</p>

<p>The set has multiple parts, each requiring a different skill set.</p>

<h3 id="books">Books</h3>
<p>Books are interesting. But there are millions of them. There are two types of books. The first type has the real pages. The second one just uses a small piece of wood to represent the pages.
<img src="/assets/images/posts/miniature-study-room/IMGR24937.JPG" />
<img src="/assets/images/posts/miniature-study-room/IMGR24935.JPG" /></p>

<h3 id="furniture">Furniture</h3>
<p>Furniture is all made of wood. The wood needs the glue specifically for modeling, which takes a few minutes to dry. The long wait time gives the flexibility to adjust the position of the pieces. Because of that, it takes time to finish one whole piece as you will need to wait for the glue between some parts to be dry before continuing.</p>

<p>The red couch is made of cloth and wood. This one is the hardest to make.
<img src="/assets/images/posts/miniature-study-room/IMGR24943.JPG" />
<img src="/assets/images/posts/miniature-study-room/IMGR24941.JPG" /></p>

<h3 id="small-decorations">Small decorations</h3>
<p><img src="/assets/images/posts/miniature-study-room/IMGR24931.JPG" /></p>

<h3 id="photos-and-paintings">Photos and Paintings</h3>
<p>The frames are made of cardboard or wood.
<img src="/assets/images/posts/miniature-study-room/IMGR24932.JPG" /></p>

<h3 id="light">Light</h3>
<p>Zoltan helped with the light. The frame of the light is metal, so it is a bit tricky to shape it. He also soldered the wires and connected them with the battery.
<img src="/assets/images/posts/miniature-study-room/IMGR24929.JPG" /></p>

<h3 id="complete">Complete</h3>
<p><img src="/assets/images/posts/miniature-study-room/IMGR24944.JPG" />
<img src="/assets/images/posts/miniature-study-room/IMGR24953.JPG" /></p>

<p>My thoughts of modeling is that it is not really a creative activity as you are just following the steps that have been tested by the professionals. But it could be a good first step to design your own models. The result is nice. We get decorations for the house anyway, why not make them yourselves? And the process requires so much focus, patience, and meticulosity!</p>]]></content><author><name>Minmin Jin</name></author><category term="modeling" /><summary type="html"><![CDATA[I bought a DIY set for Zoltan several years ago. But because of its complexity and the time it would take to do it, he never had the chance to start on it. On a cold winter night, I decided to try it since I have never done this kind of modeling before. It turned out to a big time sucker. I finished on and off after two weeks, totaling two full days on it.]]></summary></entry><entry><title type="html">My Experience of Getting a Portugal Visa</title><link href="http://localhost:4000/2022/10/18/portugal-visa.html" rel="alternate" type="text/html" title="My Experience of Getting a Portugal Visa" /><published>2022-10-18T00:00:00-07:00</published><updated>2022-10-18T00:00:00-07:00</updated><id>http://localhost:4000/2022/10/18/portugal-visa</id><content type="html" xml:base="http://localhost:4000/2022/10/18/portugal-visa.html"><![CDATA[<p>I flew to San Francisco this week to take the Schengen visa interview. The interview was scheduled at 10:00 a.m. I stayed in a hotel in Newark for other purposes. The bart green line can take me from the Union City station to the Montgomery St station, and from where, it is just a few minutes walk. I planned to leave at 8:45 a.m. and come back before noon. I ended up finishing everything at almost 3:00 p.m. The reason is that the Portugal consulate is much more restrictive on the materials than other Schengen countries, and the requirements are not listed in anywhere I could find. I had to redo a lot of the materials. I am writing down the experience to hopefully help others in the same situation.</p>

<p>First of all, Portugal visa applications are outsourced to <a href="https://www.vfsglobal.com">VFS Global</a>, as many other countries do. One benefit of using the service is that, if you applied through them once, the biometrics can be reused in your future Schengen visa applications in the next two years and you can just mail them all the materials. The VFS office is conveniently located next to Union Square. After you get on to the 5th floor, there will be bodyguard doing a rudimentary check on the materials, if you do miss some obvious things, they would send you downstairs. Fortunately, the appointment slot is still valid as long as you have been there once. Once you pass the first check, the guard takes you to a room, where you wait and see the VFS agent checking others’ materials. Reviews for this agency on Google is pretty negative. My own experience is that the process sucks, e.g. material requirements are not clearly documented, appointments could take extremely longer (probably because of the lack of clear documentation). But the staff there are nice and responsible. They went through my materials carefully, and pointed out all the things that I did not do or did not do well, which could lead to a reject from the consulate. And they allowed me to come back at the same day once I updated my materials.</p>

<p>Here is the list of materials and requirements that are needed for short stay tourism visas, according to my experience.</p>
<ul>
  <li>Application Form
    <ul>
      <li>Must be typed and hand signed. I was sent back the first time because the form was filled by hand.</li>
    </ul>
  </li>
  <li>Money order / Banker Check / Cashier Check for visa fee
    <ul>
      <li>Several people in the queue were sent back for this.</li>
    </ul>
  </li>
  <li>A recent color photograph.
    <ul>
      <li>The size is not the European visa photo size, but a size that fits the application form. But this is not too important, as the staff would help cut the photos.</li>
    </ul>
  </li>
  <li>Passport or Travel Document: Passport or Travel document must be valid for 3 months beyond the Schengen stay</li>
  <li>A photocopy of prior passport (biometric pages only) and past Schengen visas.</li>
  <li>Proof and copy of residency status in the United States (Green card, Employment Authorization Card, United States Visa)
    <ul>
      <li>You will need show the staff the original documents.</li>
    </ul>
  </li>
  <li>Travel reservation: Roundtrip flight reservation showing date of departure and date of return
    <ul>
      <li>If you are crossing country borders, also prepare the proof for traveling, e.g. ticket for train.</li>
    </ul>
  </li>
  <li>Travel medical insurance: Proof of medical coverage, including medical emergencies and repatriation. The insurance should have a minimum coverage of €30,000 or 50,000 USD
    <ul>
      <li>Only 0 deductible insurance is accepted. I ended up re-buying a new insurance..</li>
    </ul>
  </li>
  <li>Economic and work conditions:
    <ul>
      <li>Work certificate and salary
        <ul>
          <li>Also bring several the pay stubs</li>
        </ul>
      </li>
      <li>Three last bank transcripts (proof of means of subsistence), covering the entire stay and return to the country of origin.</li>
    </ul>
  </li>
  <li>Hotel reservation (if applicable): Proof of accommodations for entire stay or statement of responsibility.
    <ul>
      <li>The itinerary needs to show that the max stay is in Portugal, if you are traveling to more than one countries.</li>
      <li>Include a “number of nights” for each stay, as that is what they actually care.</li>
    </ul>
  </li>
</ul>

<p>I would recommend bringing your personal laptop with you, in case you need to update any materials. There is a Fedex close by that you can print stuff. The Fedex also has computers with Internet access. But the minute charge is quite expensive. If all any reason, you need to access computers for a relatively long time, the San Francisco Public Library is a good place to go. It is two bart stops away. It has a lot of free computers and paid printers. The staff there are super nice and provide guest passes for accessing the computers.</p>

<p>I do not understand why Portugal is so much more restrictive. I applied for Schengen visa at Switzerland consulate before the pandemic, and it was a breeze. Anyway, better to be over-prepared next time!</p>]]></content><author><name>Minmin Jin</name></author><category term="travel" /><summary type="html"><![CDATA[I flew to San Francisco this week to take the Schengen visa interview. The interview was scheduled at 10:00 a.m. I stayed in a hotel in Newark for other purposes. The bart green line can take me from the Union City station to the Montgomery St station, and from where, it is just a few minutes walk. I planned to leave at 8:45 a.m. and come back before noon. I ended up finishing everything at almost 3:00 p.m. The reason is that the Portugal consulate is much more restrictive on the materials than other Schengen countries, and the requirements are not listed in anywhere I could find. I had to redo a lot of the materials. I am writing down the experience to hopefully help others in the same situation.]]></summary></entry><entry><title type="html">Raft Basics</title><link href="http://localhost:4000/2022/09/18/raft-basics.html" rel="alternate" type="text/html" title="Raft Basics" /><published>2022-09-18T00:00:00-07:00</published><updated>2022-09-18T00:00:00-07:00</updated><id>http://localhost:4000/2022/09/18/raft-basics</id><content type="html" xml:base="http://localhost:4000/2022/09/18/raft-basics.html"><![CDATA[<p><i>
This post is mostly based on the <a href="https://www.youtube.com/watch?v=YbZ3zDzDnrw">Raft lecture</a> by John Ousterhout.
</i></p>

<p>I had a <a href="http://localhost:4000/2022/08/07/paxos-basics/">post</a> about the Paxos consensus algorithm. In this post, I would like to write about the basics of Raft, another widely used consensus algorithm.</p>

<p>Raft has the same use case as Paxos, but it is a much easier to understand algorithm. Actually the paper for Raft is named “In search of an understandable consensus algorithm”. Paxos is hard because the author gives only the necessary invariants and engineers have a lot of flexibility to do the implementation. Raft, instead, gives a step-by-step guide for how things should be done. When used as is, Raft is definitely simpler. When the use case is more complex and you need to customize certain behaviors, there is no obvious winner.</p>

<h2 id="leader-election">Leader election</h2>
<p>There are generally two approaches to consensus, leader-based and leader-less. For leader-based algorithms, at any given time, there is always one server in change, while others accept its decisions; and clients communicate with the leader. For leader-less algorithms, all servers have equal roles, and clients can contact any server.</p>

<p>Large-scale systems that have a single cluster leader typically use a separate replicated state machine to manage leader election and store configuration information that must survive leader crashes.</p>

<p>Raft uses a leader. Leader-based approaches are usually more efficient than leader-less approaches, as there are no conflicts in proposed values. With this, Raft operations can be divided into two categories: normal operations and leader changes.</p>

<p>Servers start up as followers. Followers expect to receive RPCs from leaders or candidates. Leaders must send heartbeats, i.e. empty <code class="language-plaintext highlighter-rouge">AppendEntries</code> RPCs, to maintain authority. If <code class="language-plaintext highlighter-rouge">electionTimeout</code> elapses with no RPCs, followers assume leader has crashed and start a new election. The election timeout is typically 100-500ms.</p>

<p>To start a <strong>new election</strong>, follower does the following:</p>
<ul>
  <li>Increment current term</li>
  <li>Change to candidate state</li>
  <li>Vote for itself</li>
  <li>Send <code class="language-plaintext highlighter-rouge">RequestVote</code> RPCs to all other servers, retry until either:
    <ul>
      <li>Receive votes from majority of servers: become leader, Send <code class="language-plaintext highlighter-rouge">AppendEntries</code> heartbeats to all other servers</li>
      <li>Receive RPC from valid leader: return to follower state</li>
      <li>Election timeout elapses, no one wins election: increment term, restart new election with a randomized timeout</li>
    </ul>
  </li>
</ul>

<p>Deposed leader may not be dead. For example, it might be temporarily disconnected from network, and after other servers elect a new leader, the old leader reconnects and attempts to commit log entries. Terms are used to detect stale leaders and candidates. Every RPC contains the term of the sender. If sender’s term is older, RPC is rejected, and sender reverts to follower and updates its term. If receiver’s term is older, it reverts to follower, updates its term, and then processes RPCs normally. Election updates terms of majority of servers, and prevents deposed leaders from committing new log entries.</p>

<h2 id="log-replication">Log replication</h2>
<p>Log replication is done using the following steps:</p>
<ul>
  <li>Client sends command to leader</li>
  <li>Leader appends command to its log</li>
  <li>Leader sends <code class="language-plaintext highlighter-rouge">AppendEntries</code> RPCs to followers</li>
  <li>Once new entry committed (replicated on a majority of the servers):
    <ul>
      <li>Leader passes command to its state machine, returns result to client</li>
      <li>Leader notifies followers of committed entries in subsequent <code class="language-plaintext highlighter-rouge">AppendEntries</code> RPCs</li>
      <li>Followers pass committed commands to their state machines</li>
    </ul>
  </li>
</ul>

<p>For crashed or slow followers, leader retries RPCs until they succeed. Performance-wise, for each command, only one successful RPC to any majority of servers is needed.</p>

<p>It is guaranteed that if log entries on different servers have same index and term, they store the same command, and the logs are identical in all preceding entries. If a given entry is committed, all preceding entries are also committed.</p>

<p>Consistency can be checked during the <code class="language-plaintext highlighter-rouge">AppendEntries</code> RPC call. Each <code class="language-plaintext highlighter-rouge">AppendEntries</code> RPC contains the index and term of the last log entry. If a follower does not contain a matching entry, it rejects the request. New leaders must make follower logs consistent with its own by deleting extraneous entries or filling in missing entries. To do so, leader keeps <code class="language-plaintext highlighter-rouge">nextIndex</code> for each follower, which is the index of next log entry to send to that follower and is initialized to <code class="language-plaintext highlighter-rouge">1 + leader's last index</code>. When <code class="language-plaintext highlighter-rouge">AppendEntries</code> consistency check fails, leader decrements <code class="language-plaintext highlighter-rouge">nextIndex</code> and tries again. When a follower overwrites an inconsistent entry, it deletes all subsequent entries.</p>

<h2 id="requirements">Requirements</h2>
<p>Same as Paxos, Raft also has safety and liveness requirements.</p>

<p><strong>Safety</strong></p>
<ul>
  <li>Leaders never overwrite entries in their logs.</li>
  <li>Only entries in the leader’s log can be committed.</li>
  <li>Entries must be committed before applying to state machine..</li>
</ul>

<p>To meet the safety requirements, there are several rules that we should follow.</p>
<ul>
  <li><strong>Election rule</strong>. During elections, candidate with logs most likely to contain all committed entries should be chosen.
    <ul>
      <li>Candidates include the index and term of last log entry in <code class="language-plaintext highlighter-rouge">RequestVote</code> RPCs</li>
      <li>Voting server v denies the vote if its log is “more complete”: <code class="language-plaintext highlighter-rouge">lastTerm(v) &gt; lastTerm(c) || (lastTerm(v) == lastTerm(c) &amp;&amp; lastIndex(v) &gt; lastIndex(c))</code></li>
      <li>Leader will have “most complete” log among electing majority</li>
    </ul>
  </li>
  <li><strong>Commitment rules</strong>. For a leader to decide an entry is committed:
    <ul>
      <li>The entry must be stored on a majority of servers</li>
      <li>At least one new entry from the leader’s term must also be stored on majority of servers</li>
    </ul>
  </li>
</ul>

<p><strong>Liveness</strong></p>
<ul>
  <li>Choose election timeouts randomly in [T, 2T]</li>
  <li>One server usually times out and wins election before others wake up</li>
  <li>Raft will be able to elect and maintain a steady leader as long as the system satisfies: <code class="language-plaintext highlighter-rouge">broadcastTime &lt;&lt; electionTimeout &lt;&lt; MTBF</code> (<code class="language-plaintext highlighter-rouge">MTBF</code> is average time between failures for a single server)</li>
</ul>

<h2 id="configuration-changes">Configuration changes</h2>
<p>System configuration refers to the id and address for each server, and  what constitutes a majority. Consensus mechanism must support changes in the configuration to replace failed machines or change degrees of replication.</p>

<p>Raft uses a 2-phase approach to handle configuration change. The intermediate phase uses joint consensus, meaning leader needs the majority of both old and new configurations for elections and commitment. Configuration change is just a log entry, which is applied immediately on receipt (committed or not). The process goes like commit old config, commit old + new, and commit new config. Once joint consensus is committed, we can begin replicating log entry using the new configuration. During the configuration change, any server from either configuration can server as leader. But if the current leader is not in the new config, it must step down once the new config is committed.</p>

<h2 id="log-compaction--snapshot">Log compaction / Snapshot</h2>
<p>Servers take snapshots independently. The leader occasionally send snapshots to followers that lag behind. Servers take snapshots when the log reaches a fixed size in bytes.</p>

<h2 id="references">References</h2>
<ul>
  <li>https://raft.github.io/</li>
  <li><a href="https://www.youtube.com/watch?v=YbZ3zDzDnrw">Raft lecture</a></li>
  <li>Diego Ongaro and John Ousterhout. 2014. In search of an understandable consensus algorithm. In Proceedings of the 2014 USENIX conference on USENIX Annual Technical Conference (USENIX ATC’14). USENIX Association, USA, 305–320.</li>
</ul>

<h2 id="appendix---raft-protocol">Appendix - Raft protocol</h2>
<h3 id="client-protocol">Client protocol</h3>
<ul>
  <li>Send commands to leader
    <ul>
      <li>If leader unknown, contact any server</li>
      <li>If the contacted server is not leader, it will redirect to leader</li>
    </ul>
  </li>
  <li>Leader does not respond until command has been logged, committed, and executed by leader’s state machine</li>
  <li>If request times out (e.g., leader crash):
    <ul>
      <li>Client reissues command to some other server</li>
      <li>Eventually redirected to new leader</li>
      <li>Retry request with new leader</li>
    </ul>
  </li>
  <li>Implementing <strong>exactly-once semantics</strong> as long as client does not crash by embedding a unique id in each command
    <ul>
      <li>Server includes id in log entry</li>
      <li>Before accepting command, leader checks its log for entry with that id</li>
      <li>If id found in log, ignore new command, return response from old command</li>
      <li>Prevents a command from being executed twice, if leader crashes after executing command, but before responding</li>
    </ul>
  </li>
</ul>

<h3 id="raft-protocol-glossary">Raft protocol glossary</h3>
<h4 id="terms">Terms</h4>
<ul>
  <li>Time divided into terms: election, normal operation under a single leader</li>
  <li>At most 1 leader per term</li>
  <li>Some terms have no leader (failed election)</li>
  <li>Terms act as a logical clock</li>
  <li>Each server maintains current term value, which increases monotonically</li>
  <li>Key role of terms: identify obsolete information</li>
</ul>

<h4 id="server-states">Server States</h4>
<ul>
  <li><strong>Leader</strong>: handles all client interactions, log replication. At most 1 viable leader at a time
    <ul>
      <li>Initialize <code class="language-plaintext highlighter-rouge">nextIndex</code> for each follower to <code class="language-plaintext highlighter-rouge">last log index + 1</code></li>
      <li>Send initial empty <code class="language-plaintext highlighter-rouge">AppendEntries</code> RPCs (heartbeat) to each follower; repeat during idle period to prevent election timeouts</li>
      <li>Accept commands from clients, append new entries to local log</li>
      <li>Whenever <code class="language-plaintext highlighter-rouge">last log index</code> &gt;= <code class="language-plaintext highlighter-rouge">nextIndex</code> for a follower, send <code class="language-plaintext highlighter-rouge">AppendEntries</code> RPC with log entries starting at <code class="language-plaintext highlighter-rouge">nextIndex</code>, update <code class="language-plaintext highlighter-rouge">nextIndex</code> if successful</li>
      <li>If <code class="language-plaintext highlighter-rouge">AppendEntries</code> fails because of log inconsistency, decrement <code class="language-plaintext highlighter-rouge">nextIndex</code> and retry</li>
      <li>Mark log entries committed if stored on a majority of severs and at least one entry from current term is stored on a majority of servers</li>
      <li>Step down if <code class="language-plaintext highlighter-rouge">currentTerm</code> changes</li>
    </ul>
  </li>
  <li><strong>Follower</strong>: completely passive (issues no RPCs, responds to incoming RPCs)
    <ul>
      <li>Respond to RPCs from candidates and leaders.</li>
      <li>Convert to candidate if election timeout elapses without either
        <ul>
          <li>Receiving valid <code class="language-plaintext highlighter-rouge">AppendEntries</code> RPC from the leader</li>
          <li>Granting vote to candidate</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Candidate</strong>: used to elect a new leader
    <ul>
      <li>Increment <code class="language-plaintext highlighter-rouge">currentTerm</code>, vote for self</li>
      <li>Reset election timeout</li>
      <li>Send <code class="language-plaintext highlighter-rouge">RequestVote</code> RPCs to all other servers, wait for either:
        <ul>
          <li>Votes received from majority of servers: become leader</li>
          <li><code class="language-plaintext highlighter-rouge">AppendEntries</code> RPC received from new leader: step down</li>
          <li>Election timeout elapses without election resolution: increment term, start new election</li>
          <li>Discover higher term: step down</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>During normal operation, there is 1 leader and N-1 followers.</p>

<h4 id="persistent-state">Persistent State</h4>
<p>Each server persists the following to stable storage synchronously before responding to RPCs:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">currentTerm</code>: latest term server has seen (initialized to 0 on first boot)</li>
  <li><code class="language-plaintext highlighter-rouge">votedFor</code>: candidate id that received vote in current term (or null if none)</li>
  <li><code class="language-plaintext highlighter-rouge">log[]</code>: log entries</li>
</ul>

<h4 id="log-entry">Log entry</h4>
<ul>
  <li>term: when entry was received by leader</li>
  <li>index: position of entry in the log</li>
  <li>command: command for state machine</li>
</ul>

<h3 id="requestvote-rpc">RequestVote RPC</h3>
<p>Invoked by candidates to gather votes.</p>
<ul>
  <li><strong>Arguments</strong>
    <ul>
      <li>candidateId: candidate requesting vote</li>
      <li>term: candidate’s term</li>
      <li>lastLogIndex: index of candidate’s last log entry</li>
      <li>lastLogTerm: term of candidate’s last log entry</li>
    </ul>
  </li>
  <li><strong>Results</strong>
    <ul>
      <li>term: currentTerm, for candidate to update itself</li>
      <li>voteGranted: true means candidate received vote</li>
    </ul>
  </li>
  <li><strong>Implementation</strong>
    <ol>
      <li>If term &gt; currentTerm, currentTerm = term (step down if leader or candidate)</li>
      <li>If term == currentTerm, votedFor is null or candidateId, and candidate’s log is at least as complete as local log, grant vote and reset election timeout</li>
    </ol>
  </li>
</ul>

<h3 id="appendentries-rpc">AppendEntries RPC</h3>
<p>Invoked by leader to replicate log entries and discover inconsistencies; also used as heartbeat.</p>
<ul>
  <li><strong>Arguments</strong>
    <ul>
      <li>term: leader’s term</li>
      <li>leaderId: so follower can redirect clients</li>
      <li>prevLogIndex: index of log entry immediately preceding new ones</li>
      <li>prevLogTerm: term of prevLogIndex entry</li>
      <li>entries[]: log entries to store (empty for heartbeat)</li>
      <li>commitIndex: last entry known to be committed</li>
    </ul>
  </li>
  <li><strong>Results</strong>
    <ul>
      <li>term: currentTerm, for leader to update itself</li>
      <li>success: true if follower contains entry matching prevLogIndex and prevLogTerm</li>
    </ul>
  </li>
  <li><strong>Implementation</strong>
    <ol>
      <li>Return if term &lt; currentTerm</li>
      <li>If term &gt; currentTerm, currentTerm = term</li>
      <li>If candidate or leader, step down</li>
      <li>Reset election timeout</li>
      <li>Return failure if log doesn’t contain an entry at prevLogIndex whose term matches prevLogTerm</li>
      <li>If existing entries conflict with new entries, delete ell existing entries starting with first conflicting entry</li>
      <li>Append any new entries not already in the log</li>
      <li>Advance state machine with newly committed entries</li>
    </ol>
  </li>
</ul>

<h3 id="installsnapshot-rpc">InstallSnapshot RPC</h3>
<p>Invoked by leader to send chunks of a snapshot to a follower. Leaders always send chunks in order.</p>
<ul>
  <li><strong>Arguments</strong>
    <ul>
      <li>term:  leader’s term</li>
      <li>leaderId:  so follower can redirect clients</li>
      <li>lastIncludedIndex: the snapshot replaces all entries up through and including this index</li>
      <li>lastIncludedTerm: term of lastIncludedIndex</li>
      <li>offset: byte offset where chunk is positioned in the snapshot file</li>
      <li>data[]: raw bytes of the snapshot chunk, starting at offset</li>
      <li>done: true if this is the last chunk</li>
    </ul>
  </li>
  <li><strong>Results</strong>
    <ul>
      <li>term: currentTerm, for leader to update itself</li>
    </ul>
  </li>
  <li><strong>Receiver implementation</strong>
    <ol>
      <li>Reply immediately if term &lt; currentTerm</li>
      <li>Create new snapshot file if first chunk (offset is 0)</li>
      <li>Write data into snapshot file at given offset</li>
      <li>Reply and wait for more data chunks if done is false</li>
      <li>Save snapshot file, discard any existing or partial snapshot with a smaller index</li>
      <li>If existing log entry has same index and term as snapshot’s last included entry, retain log entries following it and reply</li>
      <li>Discard the entire log</li>
      <li>Reset state machine using snapshot contents (and load snapshot’s cluster configuration)</li>
    </ol>
  </li>
</ul>]]></content><author><name>Minmin Jin</name></author><category term="computer_science" /><category term="consensus_algorithm" /><summary type="html"><![CDATA[This post is mostly based on the Raft lecture by John Ousterhout.]]></summary></entry><entry><title type="html">Utah National Parks</title><link href="http://localhost:4000/2022/09/10/utah-national-parks.html" rel="alternate" type="text/html" title="Utah National Parks" /><published>2022-09-10T00:00:00-07:00</published><updated>2022-09-10T00:00:00-07:00</updated><id>http://localhost:4000/2022/09/10/utah-national-parks</id><content type="html" xml:base="http://localhost:4000/2022/09/10/utah-national-parks.html"><![CDATA[<p>We visited the five famous Utah national parks during the Labor Day week, i.e. Arches, Canyonlands, Capitol Reef, Bryce Canyon, and Zion National Park. We flew to Salt Lake City, drove from east to west, and went home from Las Vegas.</p>

<h2 id="salt-lake-city">Salt Lake City</h2>
<p>Salt Lake City is simply huge. The airport is spacious. The streets are wide. There are also many churches around. Zoltan was joking that you could stay here for weeks and visit a new church every day. All the homeless people were gathering outside a cathedral church. The temperature was still high in September. With barely any trees in the city except some rich residential areas, we rarely met anyone on the street on a Thursday morning.</p>

<h2 id="arches-national-park">Arches National Park</h2>
<p>Arches is about 3.5hr drive away from Salt Lake City. We went to Devil’s Garden first, where we needed to climb through some mountains. The view there is beyond description. The trail covers several arches, Landscape arch and Double arch are must-see. Navajo arch is like a cave as it lies next to a mountain. Partition arch is huge and stands on a cliff.</p>

<p>It was more than 100 Fahrenheit in the middle of the day. After Devil’s Garden, we decided not to take any long hikes.</p>

<p>Some other viewpoints worth mentioning are: Sand Dune arch, an arch in a sand dune; Delicate arch, the one that usually appears in the park pins or posts; Windows arch, multiple tall arches in a central area; Balanced rock, a high standing hill with a huge rock on the top.
<img src="/assets/images/posts/utah-national-parks/IMGR24197.JPG" /></p>

<h2 id="campground-1">Campground 1</h2>
<p>We camped in the <a href="https://www.sunoutdoors.com">Sun Outdoors Canyonlands Gateway</a> for the first two nights. The campground is 10min away from the Arches and 20min away from the Canyonlands. It was in the middle of deserts but surprisingly had a swimming pool. It was pleasant to do some swimming after a hot day of hiking.
<img src="/assets/images/posts/utah-national-parks/IMGR24037.JPG" /></p>

<h2 id="canyonlands-national-park">Canyonlands National Park</h2>
<p>Canyonlands has three main districts, which are far away from each other. The Maze requires 4WD and the roads are mostly unpaved. The Needles is quite far away from where we were. So we only visited the Island in the Sky district. Arches, Canyonlands, and Capitol Reef are relatively under-developed. The restrooms in the Island in the Sky visitor center were primitive.</p>

<h3 id="shafer-overlook">Shafer overlook</h3>
<p>The Shafer viewpoint has an amazing overview of the canyon. There are roads that wind down to the bottom of the canyon. We saw batches of jeeps lining up in the road on the way to the park. They were probably coming here for back-country adventures.
<img src="/assets/images/posts/utah-national-parks/IMGR24243-24275.JPG" /></p>

<h3 id="mesa-arch">Mesa arch</h3>
<p>The mesa arch viewpoint overlooks the mesa around the Green River and Colorado River. Other viewpoints in the district, such as the Green River Overlook, are for the same scene from different perspectives.
<img src="/assets/images/posts/utah-national-parks/IMGR24299-24342.JPG" /></p>

<h2 id="campground-2">Campground 2</h2>
<p>The second site for our trip was <a href="http://sandcreekrv.com/">Sand Creek RV Park &amp; Campground</a>, located in the edge of a tiny tiny town Torrey. This campground is a cute backyard campground with very limited tent sites.
<img src="/assets/images/posts/utah-national-parks/IMGR24583.JPG" /></p>

<h2 id="capitol-reef-national-park">Capitol Reef National Park</h2>
<p>Capitol Reef is about 2 hr drive away from Canyonlands. The attractions are loosely distributed. We spent most of the time in the scenic drive and the Grand Wash within it. In the beginning of the drive, there is the Gifford House, which consists of a tiny museum owned by the Gifford family, and a gift store. The store sells freshly baked fruit pies, which seemed to be very popular. When we came back from the scenic drive at noon and wanted to try the pie, they had already been sold out. The house is often visited by bucks. We saw several in the short stay there.</p>

<p>The other memorial spot was Cassidy arch trail inside the Grand Wash. The trail is short but goes up to a peak, where the arch is hidden. From the middle of the trail, the arch looks more like a cave. From the top, it is totally different.</p>

<p>The scenic drive ends with the Capitol Gorge, which is another peak that requires some hiking to reach. Close to it is the Pleasant Creek. It’s called a creek but was just a road in the dry season. Rivers with no water turns out to be a common scene in the national parks.
<img src="/assets/images/posts/utah-national-parks/IMGR24638.JPG" /></p>

<h2 id="bryce-canyon-national-park">Bryce Canyon National Park</h2>
<p>Bryce Canyon and Zion are pretty well developed compared with the previous three parks. They have shuttles going through the park, clean bathrooms in all the main attraction points, and drinkable water in many places. We did not have much time in Bryce, so we simply followed the park guide and visited Bryce Point, Inspiration Point, and Sunset Point. These viewpoints are essentially different perspectives to one canyon. As usual, the beauty of the canyon is breathtaking. The photos simply cannot show the 50% of it.
In Sunset Point, we also took Navajo Loop, a short but steep hike to the bottom of the canyon. The bottom is not as fantastic as viewing from the top. Actually it’s similar to the hills in Capitol Reef. But the experience of hiking deep down to the bottom made it worth it.
<img src="/assets/images/posts/utah-national-parks/IMGR24670-24684.JPG" /></p>

<h2 id="campground-3">Campground 3</h2>
<p>For the rest of the trip, we stayed in the <a href="https://www.zionponderosa.com/">Zion Ponderosa Ranch Resort</a>. It is a fancy resort with all sorts of entertainment. Our favorite was the pool area, which had two swimming pools with slides, and two hot tubs.
<img src="/assets/images/posts/utah-national-parks/IMGR24747.JPG" /></p>

<h2 id="zion-national-park">Zion National Park</h2>
<p>Zion is the most crowded among all the five. The visitor center parking lot was almost always full. As a result, we parked our car in the museum and walked to the nearby shuttle stop. We did several hikes here but the most fabulous ones are Angels Landing and the Narrows.</p>

<p>Angels Landing requires a lottery permit after the pandemic. The first part of the trail is steep but paved. The second part is strenuous as you will need to use the chains. Looking at the trail from a distance, it is scary. But it is actually not as narrow as I expected.
<img src="/assets/images/posts/utah-national-parks/IMGR24785.JPG" /></p>

<p>The Narrows is accessible from the last shuttle stop - Temple of Sinawava. The beginning is a simple walk along the river. Fat rock squirrels were running around all over the place and asking for food from humans.
<img src="/assets/images/posts/utah-national-parks/IMGR24794.JPG" />
After about 1 mile starts the actual trail. We did not do much plan and was surprised to find that we needed to walk in the river. Most people used rented water boots or just their foot ware. We did not have other shoes other than our hiking boot, so we chose to wade the water in bare feet. The bottom of the river is mostly rocky with a few places covered with sand. It was painful to walk on the rocks with bare feet, but we held on for 3 hours and had to leave early to catch the flight. The hike is in the bottom of the valley, so a lot of shade. Also with the chilly water, it was a pretty comfortable hike in this weather.
<img src="/assets/images/posts/utah-national-parks/IMGR24806.JPG" /></p>

<h2 id="final-words">Final Words</h2>
<p>This is another beautiful trip. The five national parks are unique and charming in their own way. We finished the 30hr podcast of the Japanese history in WW2 in this trip.</p>]]></content><author><name>Minmin Jin</name></author><category term="travel" /><summary type="html"><![CDATA[We visited the five famous Utah national parks during the Labor Day week, i.e. Arches, Canyonlands, Capitol Reef, Bryce Canyon, and Zion National Park. We flew to Salt Lake City, drove from east to west, and went home from Las Vegas.]]></summary></entry><entry><title type="html">Paxos Basics</title><link href="http://localhost:4000/2022/08/07/paxos-basics.html" rel="alternate" type="text/html" title="Paxos Basics" /><published>2022-08-07T00:00:00-07:00</published><updated>2022-08-07T00:00:00-07:00</updated><id>http://localhost:4000/2022/08/07/paxos-basics</id><content type="html" xml:base="http://localhost:4000/2022/08/07/paxos-basics.html"><![CDATA[<p>This post is mostly based on the <a href="https://www.youtube.com/watch?v=JEpsBg0AO6o">Paxos lecture video</a> by John Ousterhout, and <a href="https://paxos.systems">Paxos Made Moderately Complex</a>.</p>

<p>Paxos is a protocol for state machine replication in an asynchronous environment to reach consensus on single values. The failure model of a replica in an asynchronous environment includes non-<a href="https://en.wikipedia.org/wiki/Byzantine_fault">Byzantine</a> fail-stop, delayed or lost messages. The goal is to make the state machines reliable by executing the same commands in the order order on all servers, so in the event of failures, the states do not get lost. The challenge comes up when multiple clients issue requests to replicas in parallel. Different replicas may receive requests in different orders and execute the commands in different order, causing their local states to diverge from one another over time.</p>

<p>The problem can be modeled as having a sequence of slots with commands. The commands are stored as log entries and are executed in the state machines in the order of their slot index. Replicas receive requests from clients and assign them to specific slots. In the case of concurrent requests, a consensus protocol is used to choose a single command for the same slot from the different proposals from the replicas. A replica awaits for the decision before actually updating the sequence of commands, executing the next command, and sending back a response to the client.</p>

<h2 id="basic-paxos-single-decree">Basic Paxos (“single decree”)</h2>
<p>The basic idea of Basic Paxos is to have one or more servers propose values, and pick one <strong>single value</strong> as <strong>chosen</strong>. The term “consensus problem” typically refers to this single-value formulation.</p>

<h3 id="requirements">Requirements</h3>
<p>There are two requirements for Basic Paxos, safety and liveness.</p>
<ul>
  <li><strong>Safety</strong>
    <ul>
      <li>Only a single value may be chosen.</li>
      <li>A server never learns that a value has been chosen unless it really has been.</li>
    </ul>
  </li>
  <li><strong>Liveness</strong> (assuming majority of servers are up and communicating within reasonable timelines)
    <ul>
      <li>Some proposed value is eventually chosen.</li>
      <li>If a value is chosen, servers eventually learn about it.</li>
    </ul>
  </li>
</ul>

<h3 id="components">Components</h3>

<p>There are two components that work together to implement the algorithm.</p>
<ul>
  <li><strong>Proposers</strong>: handles client requests; and actively proposes values to be chosen.</li>
  <li><strong>Acceptors</strong>: passively responds to messages from proposers by voting yes or no, which forms the consensus. They want to know which value was chosen so they can pass it to the state machine. They store the chosen value and the state of the decision process.</li>
</ul>

<p>Optionally, there could be a third component called <strong>listeners</strong>, who would like to know the chosen value. They can be merged to the acceptors.</p>

<h3 id="thought-process">Thought process</h3>

<p>If we only have one single acceptor, it could crash and lose the chosen value. So it is better to have multiple acceptors and the value will be chosen if it is accepted by majority of acceptors, i.e. using quorum.</p>

<p>If acceptors accept only first value they receive, in the event of simultaneous proposals, no value might be chosen. Think of the case when each acceptor receives a different proposal. Therefore, acceptors must sometimes accept multiple different values.</p>

<p>If acceptors accept every value it receives, multiple values could be chosen, which violates the safety requirement. Therefore, once a value has been chosen, future proposals must propose or choose that same value. Imagine a situation when a proposal is issued but delayed, and a new proposal arrives and is accepted. There must be a way to reject the old first proposal. So we need a way to order the proposals.</p>

<h3 id="proposal-numbers">Proposal numbers</h3>

<p>The way to order proposals is to assign a unique number to each proposal. Higher numbers take priority over lower numbers. One simple approach is to concatenate two values. The lower bits is the server id, which is unique per server. This makes sure no two server generate the same proposal number. The higher bits is a max round number that is the largest that a server has ever seen. Servers track the round number and increment it to generate a new proposal number. Proposers must persist the max round number on disk, so they do not reuse it in case of crash or restart.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Proposal number = |Round Number|Server Id|
</code></pre></div></div>

<h3 id="flow">Flow</h3>

<p>The flow of Basic Paxos looks like below. Acceptors must record minProposal, acceptedProposal, and acceptedValue on stable storage.</p>
<ul>
  <li>Proposer
    <ul>
      <li>Choose a new proposal number n</li>
      <li>Broadcast <code class="language-plaintext highlighter-rouge">Prepare(n)</code> to a majority (or all) of Acceptors</li>
    </ul>
  </li>
  <li>Acceptor
    <ul>
      <li>Receive <code class="language-plaintext highlighter-rouge">Prepare(n)</code></li>
      <li>If n &gt; minProposal then minProposal = n, and accept the value. Otherwise, reject the value.</li>
      <li>Return(acceptedProposal, acceptedValue)</li>
    </ul>
  </li>
  <li>Proposer
    <ul>
      <li>Receive responses from majority</li>
      <li>If any acceptedValues returned, replace value with acceptedValue for highest acceptedProposal</li>
      <li>Broadcast <code class="language-plaintext highlighter-rouge">Accept(n, value)</code> to a majority (or all) Acceptors</li>
    </ul>
  </li>
  <li>Acceptor
    <ul>
      <li>Respond to <code class="language-plaintext highlighter-rouge">Accept(n, value)</code>:</li>
      <li>If n &gt;= minProposal then:
        <ul>
          <li>acceptedProposal = minProposal = n</li>
          <li>acceptedValue = value</li>
        </ul>
      </li>
      <li>Return(minProposal)</li>
    </ul>
  </li>
  <li>Proposer
    <ul>
      <li>Responses received from majority:
        <ul>
          <li>Any rejections (result &gt; n) ? goto(1)</li>
          <li>Otherwise, value is chosen</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="problems-of-basic-paxos">Problems of Basic Paxos</h3>

<p>There are several problems with Basic Paxos. One is that competing proposers may cause livelock. One solution is to have randomized delay before restarting, which gives other proposers a chance to finish choosing. Multi-Paxos will use leader election instead.</p>

<p>The other one is that only the proposer knows which value has been chosen. If other servers want to know, must execute Paxos with their own proposal.</p>

<h2 id="multi-paxos">Multi-Paxos</h2>

<p>Multi-Paxos combines several instances of Basic Paxos to agree on a series of values forming the log. It uses separate Basic Paxos for each slot in the log. To do this, we add <code class="language-plaintext highlighter-rouge">index</code> argument to <code class="language-plaintext highlighter-rouge">Prepare</code> and <code class="language-plaintext highlighter-rouge">Accept</code>. The lifecycle of a request looks like below:</p>
<ol>
  <li>Client sends command to server.</li>
  <li>Server uses Paxos to choose command as value for a slot of the log.</li>
  <li>Server returns result from state machine to client.</li>
  <li>Server waits for previous log entries to be applied, then applies new command to state machine.</li>
</ol>

<h3 id="choosing-a-slot-for-a-given-client-request">Choosing a slot for a given client request</h3>

<p>When a request arrives from client, replica first finds the first slot that is not known to be chosen (i.e. decision has not been made for this slot), then it runs Basic paxos to propose client’s command for this slot. If a <code class="language-plaintext highlighter-rouge">Prepare</code> returns acceptedValue, meaning the slot has been chosen for other replicas, it updates the slot with the acceptedValue and start again; Otherwise, the replica chooses the client’s command.</p>

<p>Replicas can handle multiple client requests concurrently, by selecting different slots for each. However, when it comes to the state machine, the commands must be passed to the state machine in the order of the slot.</p>

<h3 id="performance-optimization">Performance optimization</h3>

<p>Basic Paxos is inefficient because it allows multiple concurrent proposers, and thus conflicts and restarts are likely to happen, which causes higher load, leading to even more conflicts. Also, for each chosen value, 2 round of RPCs (Prepare and Accept) are needed.</p>

<h4 id="pick-a-leader">Pick a leader</h4>

<p>To solve the first issue, we can limit only one server as the proposer, which makes the server a <strong>leader</strong>. One simple approach to elect a leader from Lamport is to let the server with the highest id act as the leader. Each server sends a heartbeat message to every other server every T ms. If a server hasn’t received heartbeat from server with higher ID in last 2T ms, it acts as leader. A leader accepts requests from client and acts as proposer and acceptor. Other servers reject client requests or redirect them to the leader, and act only as acceptor.</p>

<h4 id="eliminate-most-prepare-rpcs">Eliminate most Prepare RPCs</h4>

<p>Prepare RPCs are needed for Basic Paxos to block old proposals and find out about possibly chosen values. To eliminate the Prepare RPC, we can make the proposal number refer to the entire log, and let acceptors return the highest proposal number that is accepted for the current slot. Acceptors will also return a <code class="language-plaintext highlighter-rouge">noMoreAccepted</code> bool to indicate if no proposals are accepted for any slot beyond the current one.</p>

<p>If acceptor responds to Prepare with <code class="language-plaintext highlighter-rouge">noMoreAccepted</code>, the leader skips future Prepares with that acceptor (until Accept rejected). Once the leader receives <code class="language-plaintext highlighter-rouge">noMoreAccepted</code> from majority of acceptors, no need for Prepare RPCs. With this, most log entries can be chosen in a single round of RPCs.</p>

<h3 id="ensuring-full-disclosure">Ensuring full disclosure</h3>

<p>So far, information is incomplete. Log entries are only replicated to the majority, and only proposer knows when entry is chosen. We want servers to be fully replicated, and be aware of the chosen value so that they can pass it to the state machine. The steps to achieve the goals are:</p>
<ul>
  <li>Keep retrying Accept RPCs until all acceptors respond (in background). This will fully replicates most entries.</li>
  <li>Mark entries that are known to be chosen with a special value. Each server maintains a <code class="language-plaintext highlighter-rouge">firstUnchosenIndex</code> index, which is the earliest log entry not marked as chosen.</li>
  <li>Proposer includes its <code class="language-plaintext highlighter-rouge">firstUnchosenIndex</code> in Accept RPCs. Acceptor marks all entries i chosen if <code class="language-plaintext highlighter-rouge">i &lt; request.firstUnchosenIndex</code> and <code class="language-plaintext highlighter-rouge">acceptedProposal[i] == request.proposal</code>. This makes acceptors know about most chosen entries.</li>
  <li>Acceptor returns its <code class="language-plaintext highlighter-rouge">firstUnchosenIndex</code> in Accept replies. If proposer’s firstUnchosenIndex &gt; firstUnchosenIndex from response, then proposer sends <code class="language-plaintext highlighter-rouge">Success</code> RPC (in background)</li>
  <li><code class="language-plaintext highlighter-rouge">Success(index, v)</code> notifies acceptor of chosen entry:
    <ul>
      <li>acceptedValue[index] = v</li>
      <li>Mark acceptedProposal[index] as chosen</li>
      <li>return firstUnchosenIndex</li>
      <li>Proposer sends additional Success RPCs, if needed</li>
    </ul>
  </li>
</ul>

<h3 id="client-protocol">Client protocol</h3>

<p>Clients send commands to the leader. If leader is unknown, they can contact any server, which will redirect the request to the leader. Leader responds only after the command has been chosen and executed by leader’s state machine. If the request times out, client retries the request.</p>

<p>If the leader crashes after executing the command but before responding, we must not execute command twice. The solution is to have the client embed a unique id in each command. Servers include the id in the log entry. State machine records most recent command executed for each client. Before executing command, the state machine checks to see if the command has already been executed, if so, it ignores the new command and returns the response from old command.</p>

<h3 id="configuration-changes">Configuration Changes</h3>

<p>System configurations such as ids or addresses for each server, what constitutes a majority can change over time, for reasons like replacing a failed machine, or changing in the degree of replication. The safety requirement for configuration change is that during configuration changes, it must not be possible for different majorities to choose different values for the same log entry.</p>

<p>The solution is to have the configuration stored as a log entry, and replicated just like any other log entry. Configuration for choosing entry i is determined by entry i-α, i.e. a configuration change does not take effect until α commands have been executed. During (i-α, i), multiple concurrent commands can be pending. If the change needs to be completed quickly, the client can issue no-op commands.</p>

<h2 id="materials">Materials</h2>

<ul>
  <li><a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/lamport-paxos.pdf">Original paper</a> by Leslie Lamport. Created in the 1980s but not published until 1998 because the reviewers didn’t like the Greek parable in the paper and he didn’t want to change it.</li>
  <li><a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf">Paxos Made Simple</a> is a second attempt by Leslie Lamport to explain Paxos. It is still not widely understood.</li>
  <li><a href="http://www.cs.utexas.edu/users/lorenzo/corsi/cs380d/papers/paper2-1.pdf">Paxos Made Live - An Engineering Perspective</a> by Google engineers sharing their experience implementing Paxos in Chubby.</li>
  <li><a href="https://www.youtube.com/watch?v=JEpsBg0AO6o">The Paxos lecture video</a> by John Ousterhout (author of the <a href="http://www.stanford.edu/~ouster/cgi-bin/papers/lfs.pdf">log-structured filesystem paper</a>) makes it simple.</li>
  <li><a href="https://paxos.systems">Paxos Made Moderately Complex</a> is an operational description of Multi-Paxos.</li>
</ul>

<h2 id="other-consensus-algorithms">Other consensus algorithms</h2>

<ul>
  <li><a href="https://ramcloud.stanford.edu/wiki/download/attachments/11370504/raft.pdf">RAFT</a> is an attempt at a more understandable consensus algorithm. The <a href="https://www.youtube.com/watch?v=YbZ3zDzDnrw">video presentation</a>, also by John Ousterhout, is great too.</li>
  <li><a href="http://pmg.csail.mit.edu/papers/vr-revisited.pdf">Viewstamped Replication</a> by Barbara Liskov is an early algorithm to directly model log replication.</li>
  <li><a href="http://www.stanford.edu/class/cs347/reading/zab.pdf">Zab</a> is the algorithm used by Zookeeper.</li>
</ul>]]></content><author><name>Minmin Jin</name></author><category term="computer_science" /><category term="consensus_algorithm" /><summary type="html"><![CDATA[This post is mostly based on the Paxos lecture video by John Ousterhout, and Paxos Made Moderately Complex.]]></summary></entry><entry><title type="html">[notes] How to Speak</title><link href="http://localhost:4000/2022/07/27/notes-how-to-speak.html" rel="alternate" type="text/html" title="[notes] How to Speak" /><published>2022-07-27T00:00:00-07:00</published><updated>2022-07-27T00:00:00-07:00</updated><id>http://localhost:4000/2022/07/27/notes-how-to-speak</id><content type="html" xml:base="http://localhost:4000/2022/07/27/notes-how-to-speak.html"><![CDATA[<p>Patrick Winston’s How to Speak talk has been an MIT tradition for over 40 years. The talk is intended to improve your speaking ability in critical situations by teaching you a few heuristic rules. The talk is available on <a href="&quot;https://www.youtube.com/watch?v=Unzc731iCUY&quot;">youtube</a>.</p>

<h2 id="how-to-start">How to Start</h2>
<p>The best way to start a talk is with an empowerment promise, telling people what they will know by the end of the talk that they do not at the beginning of the talk.</p>

<h2 id="samples">Samples</h2>
<ul>
  <li>Cycle around the idea, so everyone gets it</li>
  <li>Build fence around it, to distinguish it from others’ ideas</li>
  <li>Use verbal punctuation</li>
  <li>Ask questions</li>
</ul>

<h2 id="tools">Tools</h2>
<h3 id="time-and-place">Time and Place</h3>
<p>The best time to give a talk is at 11:00 AM. The best place is well-lit, cased, and populated.</p>

<h3 id="board">Board</h3>
<p>The benefits of using a board are:</p>
<ul>
  <li>Provides graphic support</li>
  <li>Helps control your speed</li>
  <li>Gives a target for your hands to point at. Do not hide your hands in the back or in the pockets.</li>
</ul>

<h3 id="props">Props</h3>
<p>Both boards and props help facilitate empathetic mirroring, meaning audiences are more likely to imagine themselves doing the physical work that you are doing.</p>

<h3 id="projections">Projections</h3>
<p>Slides are for good for exposing ideas, rather than informing ideas. It is always correct to say that “you have too many slides, and too many words”.</p>

<h4 id="important-rules-in-creating-slides">Important rules in creating slides</h4>
<ul>
  <li>Do not read</li>
  <li>Be in the image</li>
  <li>Keep images simple</li>
  <li>Eliminate clutter</li>
</ul>

<h4 id="crimes-to-avoid">Crimes to avoid</h4>
<ul>
  <li>Laser pointer
    <ul>
      <li>You lose contact with the audience while trying to use the pointer</li>
      <li>Make the slide self-explanatory instead (use marks, numbers…)</li>
    </ul>
  </li>
  <li>An hapax legomenon: Use it at most once to show the complexity</li>
  <li>Being too-heavy</li>
</ul>

<h2 id="informing">Informing</h2>
<ul>
  <li>Promise</li>
  <li>Inspiration: People are inspired by others who exhibit passion about what they are doing.</li>
  <li>How to teach how to think:
    <ul>
      <li>Provide stories they need to know</li>
      <li>Questions they need to ask about those stories</li>
      <li>Mechanisms for analyzing those stories</li>
      <li>Ways to put those stories together</li>
      <li>Ways to evaluate how reliable those stories are</li>
    </ul>
  </li>
</ul>

<h2 id="persuading">Persuading</h2>
<h3 id="job-talks">Job talks</h3>
<ul>
  <li>Vision: provides the problem and approach</li>
  <li>Done something: provides the steps or things needs to be done.</li>
  <li>Cover the above in 5 minutes</li>
</ul>

<h3 id="get-famous-you-get-used-to-be-famous-but-you-never-get-used-to-be-ignored">Get famous: You get used to be famous, but you never get used to be ignored.</h3>
<ul>
  <li>Symbol</li>
  <li>Slogan</li>
  <li>Surprise</li>
  <li>Salient idea (that sticks out). “Near miss” is the best.</li>
  <li>Story</li>
</ul>

<h2 id="how-to-stop">How to Stop</h2>
<h3 id="final-slide">Final slide</h3>
<p>The final slide is likely to be exposed to the audience for the longest time. Use it to help them remember you!</p>
<ul>
  <li>(x) collaborators: put them in the front of the talk</li>
  <li>(✓) Contributions</li>
</ul>

<p>Example contributions from Professor Winston:</p>
<ul>
  <li>Argued uniqueness of human intelligence</li>
  <li>Demonstrated culturally biased understanding, persuasive retelling, schizophrenic behavior, and self-aware machines</li>
  <li>Offered steps toward a better understanding of ourselves and each other</li>
</ul>

<h3 id="final-words">Final words</h3>
<ul>
  <li>Use a joke to finish</li>
  <li>Salute to the audience (e.g. happy to be here to give the talk)</li>
  <li>Never say thank you. It is a weak move.</li>
</ul>]]></content><author><name>Minmin Jin</name></author><category term="notes" /><category term="communication" /><summary type="html"><![CDATA[Patrick Winston’s How to Speak talk has been an MIT tradition for over 40 years. The talk is intended to improve your speaking ability in critical situations by teaching you a few heuristic rules. The talk is available on youtube.]]></summary></entry><entry><title type="html">One month into Confluent</title><link href="http://localhost:4000/2022/07/10/one-month-into-confluent.html" rel="alternate" type="text/html" title="One month into Confluent" /><published>2022-07-10T00:00:00-07:00</published><updated>2022-07-10T00:00:00-07:00</updated><id>http://localhost:4000/2022/07/10/one-month-into-confluent</id><content type="html" xml:base="http://localhost:4000/2022/07/10/one-month-into-confluent.html"><![CDATA[<p>I left Google and joined Confluent about one month ago. All my career years have been spent in large corporations. Working for a company of Confluent’s size is a brand new experience. I am documenting my discoveries and surprises before I get too used to the new world.</p>

<h2 id="toolings">Toolings</h2>
<p>Google has such a large range of products that most of the day-to-day tools we use are created within the company, such as video conferencing, collaborative documentations, and etc. The rest of the gaps are mostly filled by other large companies, such as SAP Concur. I did expect smaller companies to rely more on third party vendors. But the actual amount and variety were astonishing. Just to give some examples, they have apps for initiating, communicating, and tracking immigration stuff, for giving feedback, and for managing flags used in code.</p>

<p>It appears they picked the vendors who are also in the startup or small business world, possibly to support each other. These businesses along with Confluent could probably form an ecosystem where the cash flows.</p>

<p>I have to mention that they have a central system <b>Okta</b> that is responsible for authentication to everything. It works smoothly and simplistically. Coming from a place where there are extremely strict security rules, as well as tools that enforce the rules, I felt the “freedom”.</p>

<h2 id="operating-systems">Operating systems</h2>
<p>I was thrilled when I got the IT questionnaire that asked to pick a laptop between MacBook pro 16” and Thinkpad P15 - those are very powerful and expensive machines. At a second thought, I was wondering if we would be developing on the laptop directly. And the answer is yes.</p>

<p>The model used in many big IT companies is desktop / cloud instance + laptop, for performance and security reasons. So the laptops they provide are usually mid-tier, as they are often just for emails and browsing.</p>

<p>I got the most powerful laptop ever in my life. It is also so heavy that it is not really portable. I installed Linux on it, and found out most software engineers in the company develop on Mac OS. Having been a Mac user for a long time, I got annoyed from time to time when it came to coding directly on Mac. The best alternative was to turn on the laptop and ssh-ing to a Linux box, which is also how I did my job all the time. So it was probably the biggest culture shock when joining Confluent.</p>

<h2 id="development-environments">Development environments</h2>
<p>I had a few PRs merged and had my hands dirty on so many different tools that I have read about or first heard of. I think the overall experience in Google is more fluent, mainly because of the mono repo. Confluent uses GitHub and microservice architecture, as a result, code is spread across multiple repos. Refactoring or code sharing becomes much harder than back in Google. I will talk more about it in a future post, as I make progress in first project, which is a service migration and involves large amount of refactoring.</p>

<p>I am still exploring the “soft” side of the new company. Maybe I will share more later.</p>]]></content><author><name>Minmin Jin</name></author><category term="career" /><summary type="html"><![CDATA[I left Google and joined Confluent about one month ago. All my career years have been spent in large corporations. Working for a company of Confluent’s size is a brand new experience. I am documenting my discoveries and surprises before I get too used to the new world.]]></summary></entry><entry><title type="html">Atlanta and the Great Smoky Mountains</title><link href="http://localhost:4000/2022/06/04/atlanta-and-the-great-smoky-mountains.html" rel="alternate" type="text/html" title="Atlanta and the Great Smoky Mountains" /><published>2022-06-04T00:00:00-07:00</published><updated>2022-06-04T00:00:00-07:00</updated><id>http://localhost:4000/2022/06/04/atlanta-and-the-great-smoky-mountains</id><content type="html" xml:base="http://localhost:4000/2022/06/04/atlanta-and-the-great-smoky-mountains.html"><![CDATA[<p>Zoltan and I went to the Great Smoky Mountains in the end of May, to take some time off before I transit to a new company. We chose it because of several reasons: we have never been to the southern states but heard South and North Carolina have nice views, the Great Smoky Mountains National Park is one of top most visited national parks in the States, I had a long vacation so it was a good time to go to a faraway place.</p>

<h2 id="day-1---arriving-in-atlanta">Day 1 - Arriving in Atlanta</h2>
<p>We took a flight in the evening, slept in the plane, and arrived in Atlanta in the early morning. The first thing we did in Atlanta was to have a classic Southern breakfast. We were excited that the restaurant was owned by local Black people, though, we later realized that this is very common in Atlanta.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMG_5388.JPG" /></p>

<p>We then visited the Atlanta History Center to learn about the histories. The <a href="&quot;https://www.atlantahistorycenter.com/buildings-and-grounds/swan-house/&quot;">Swan House</a> in the center was a nice addition. It vividly exhibited the upper class life after the Civil War. Apart from that, we also visited <a href="&quot;https://www.atlantahistorycenter.com/exhibitions/cyclorama/&quot;">The Battle of Atlanta Cyclorama painting</a>, CNN, and Georgia Institute of Technology.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMG_5406.JPG" />
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23429.JPG" /></p>

<p>We finished the first day in Georgia in a hostel close to downtown Atlanta. We were so exhausted when we got to the hostel, as the previous night’s sleep was short and rough, that we had a quick shower and went to bed immediately.</p>

<h2 id="day-2---driving-to-the-smoky-mountains">Day 2 - Driving to the smoky mountains</h2>
<p>We checked out the hostel early in the morning, and had breakfast in a Waffle House. This chained store had so many branches in Atlanta that we had to try it once. It turned out to be average pancakes. After breakfast, we went to the Midtown for a walk before heading to the national park. The Midtown is probably the richest residential area. It had beautiful houses and clean streets, and was clearly separated from the external world, which was featured by broken windows, deserted restaurants, and trashes everywhere.</p>

<p>Then we went on the 3-hour drive to the smoky mountains. The drive was surrounded by green leafy trees.</p>

<h2 id="day-3-4---oconaluftee">Day 3, 4 - Oconaluftee</h2>
<p>We arrived at the Oconaluftee visitor center eventually, and took an evening walk around the Mountain Farm Museum.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23476.JPG" />
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23481.JPG" /></p>

<p>Since it was still bright, we went down the Oconaluftee River Trail. We walked and walked and met a deer in the creek, a herd of deers actually. That scene was touching for some reason.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23490.JPG" />
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMG_5442.JPG" /></p>

<p>We reserved three campsites close to the three visitor centers in the park. The first two nights was in the <a href="&quot;https://www.recreation.gov/camping/campgrounds/232486&quot;">Smokemont campground</a>, next to the Oconaluftee visitor center.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23493.JPG" /></p>

<p>Next day was a day consisting of small hikes.</p>

<p>Morning hike in the <b>Mingo Falls</b>.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMG_5445.JPG" /></p>

<p>Then a longer hike in <b>Newfound gap</b>, which is part of the <a href="&quot;https://en.wikipedia.org/wiki/Appalachian_Trail&quot;"><b>Appalachian trail</b></a>. We met another deer in the trail, next to a primitive campsite.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23523.JPG" />
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23541.JPG" /></p>

<h2 id="day-5-6---sugarlands">Day 5, 6 - Sugarlands</h2>
<p>We moved on to the Sugarlands district, and continued doing more hikes there.</p>

<p>The first attraction there we visited was the <a href="&quot;https://www.nps.gov/grsm/planyourvisit/clingmansdome.htm&quot;"><b>Clingmans Dome</b></a>, which was the highest point in the Great Smoky Mountains. The sign says that hikers doing the <a href="&quot;https://en.wikipedia.org/wiki/Appalachian_Trail&quot;">Appalachian trail</a> often stop by here to enjoy the views.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23563.JPG" /></p>

<p>Coming down from the dome, we entered the trail head to the Andrew’s Bald.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23584.JPG" />
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23599.JPG" /></p>

<p>Before the nightfall, we explored the <b>Elkmont Historic District</b>. It was quite a disappointment TBH. The only thing left from the past was stone fireplaces that were not much different from the existing ones. The <b>Appalachian Clubhouse</b> were residential houses remade to exhibit the original looks of the vacation village. We thought it might be a better experience to make them usable rentable to tourists.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23621.JPG" />
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23613.JPG" /></p>

<p>That night, we slept in the <a href="&quot;https://www.recreation.gov/camping/campgrounds/232487&quot;"><b>Elkmont Campground</b></a>.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23610.JPG" /></p>

<p>The next day was a full day hike in <a href="&quot;https://www.alltrails.com/trail/us/tennessee/alum-cave-trail-to-mount-leconte&quot;"><b>Alum Cave Trail</b></a> all the way to the <b>Mount LeConte</b>. This is one of best trails I have hiked. In the beginning part, we were walking along a creek. Then came the forests.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23629.JPG" />
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23641.JPG" />
In the midway, there was a steep segment with stairs. A “grandpa” on the way described it as a “stairway to heaven”.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23634.JPG" />
Finally, we arrived at the top of Mount LeConte, where there was a working lodge. A guy asked us to take of photo of him in front of the LeConte Lodge dining room, which has the actual date on it, so he could prove that he did this hike every year on his birthday.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23659.JPG" />
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23661.JPG" />
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23697.JPG" /></p>

<p>We did a horseback riding in the evening. We were the last group and the group was only the guide and us.</p>

<h2 id="day-7-8---cades-cove">Day 7, 8 - Cades Cove</h2>
<p>Our final stay in the national park was the Cades Cove, which was also the busiest district in the park. It is a 10-mile loop with multiple view points. We went there at the right time and were lucky to see mother bears leading two or three cubs several times. Because of that, driving was painfully slow.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23742.JPG" />
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23730.JPG" /></p>

<p>We biked the loop with rental bikes the next day, and stopped in churches, local ancient houses, and <b>Abrams Falls</b>.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23765.JPG" /></p>

<p>It was so hot during that two days that we had all the ice cream for the whole year.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMG_5479.JPG" /></p>

<h2 id="day-9-10---deep-creek">Day 9, 10 - Deep Creek</h2>
<p>Leaving the national park, we went on the way to the <b>Fontana Dam</b>. Because of road constructions, we had to go around the mountains to get there. The damn was gigantic and grand. There were very few tourists and the visitor center seemed to have been closed for a while.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23798.JPG" /></p>

<p>After another long drive, we arrived at the last campsite <a href="&quot;https://www.deepcreekcamping.com/index.html&quot;">Deep Creek Campground</a>. We learned playing tetherball from a little kid. We had our first watermelon this year.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMG_5502.JPG" /></p>

<p>The next day we went for <a href="&quot;https://en.wikipedia.org/wiki/Tubing_(recreation)&quot;"><b>tubing</b></a>, a new water activity we were eager to try, especially during the hot days in Cades Cove. There is a fast-running creek across the Great Smoky Mountains. It goes from the mountains and passes the campground. We rented tubes from the store, and first tried the creek segment next to the campground. The creek was much faster than it looked like, and the water was still cold despite the high temperature in the air. It was all natural but as much fun as water rafting in the Disney water park. In the end of the route, there was a cable across the creek and we used it to get back to the land.</p>

<p>After several rounds, we moved up to the national park route. We started somewhere above the <b>Tome Branch Falls</b>, passed many houses, and reached the campground. It was an adventurous journey, as the officially approved route ended in the parking lot of the national park, but we kept going beyond that line and was not sure if we would be able to reach our destination.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23804.JPG" /></p>

<p>In the end of the tubing, it started to rain. It was a Sunday, so most families left the campground. We went back and moved our tent to a pavilion to avoid the rain. Camping is always more fun in windless sunny days.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMG_5503.JPG" /></p>

<p>Before the end of the day, we had the chance to check out the nearby city, which has a nice train museum.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23820.JPG" />
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23838.JPG" /></p>

<h2 id="day-11---go-home">Day 11 - Go home</h2>
<p>On the way back to Atlanta, it started raining dogs and cats. We were lucky to have a mostly sunny trip. As we had time before the flight, we visited the Coke Cola headquarter and tried hundreds of coke variations.
<img src="/assets/images/posts/atlanta-and-the-great-smoky-mountains/IMGR23875.JPG" /></p>]]></content><author><name>Minmin Jin</name></author><category term="travel" /><summary type="html"><![CDATA[Zoltan and I went to the Great Smoky Mountains in the end of May, to take some time off before I transit to a new company. We chose it because of several reasons: we have never been to the southern states but heard South and North Carolina have nice views, the Great Smoky Mountains National Park is one of top most visited national parks in the States, I had a long vacation so it was a good time to go to a faraway place.]]></summary></entry><entry><title type="html">Death Valley</title><link href="http://localhost:4000/2022/01/08/death-valley.html" rel="alternate" type="text/html" title="Death Valley" /><published>2022-01-08T00:00:00-08:00</published><updated>2022-01-08T00:00:00-08:00</updated><id>http://localhost:4000/2022/01/08/death-valley</id><content type="html" xml:base="http://localhost:4000/2022/01/08/death-valley.html"><![CDATA[<p>Death Valley is attractive just by its name. In the old times, people who came to this area usually had a difficult time crossing it alive because of its vastness and extreme whether. Even in our trip during the last Christmas, it could be very hot when walking in the sun.
<img src="/assets/images/posts/death-valley/IMGR23199.JPG" />
<img src="/assets/images/posts/death-valley/IMGR23206.JPG" /></p>

<h2 id="camping">Camping</h2>
<p>Our trip lasted 5 days. We used a rental car to drive around. As usual, we slept in our green tent in the <a href="https://www.panamintsprings.com/accommodations/camping-rv">Panamint Springs campground</a>. The ground there is sandy and not really the best for camping. Our tent almost got blown away on one day. We got back and found the tent was lying on the side. It was still there only because some kind neighbor helped put rocks on the edge.
<img src="/assets/images/posts/death-valley/IMGR23032.JPG" /></p>

<h2 id="red-rock-canyon">Red Rock Canyon</h2>
<p>The colored rocks are common in districts around Las Vegas, especially red rocks. The redness is from the iron inside. This also seems to be a popular place for climbing.
<img src="/assets/images/posts/death-valley/IMGR22731.JPG" /></p>

<h2 id="badwater-basin">Badwater Basin</h2>
<p>The most amazing part of Death Valley is its diverse landscape. Badwater Basin is one of the representative spots. A large amount of salt has formed hexagonal shapes expanded from the Earth crust. The result is fascinating. It is also one of the most popular tourist attraction in Death Valley.
<img src="/assets/images/posts/death-valley/IMGR22815.JPG" /></p>

<h2 id="mosaic-canyon">Mosaic Canyon</h2>
<p>This is an easy hike to have a taste of the canyons. The feature of the canyons here are the colorful walls, both in color and texture.
<img src="/assets/images/posts/death-valley/IMGR22865.JPG" /></p>

<h2 id="mesquite-sand-dune">Mesquite sand dune</h2>
<p>The Mesquite sand dune is very easy to access. It is just next to the road. And it is also a good place for stargazing. Stargazing is more of a summer activity, as stars are more clear and the winter night in Death Valley is also chilly.
<img src="/assets/images/posts/death-valley/IMGR23087.JPG" />
<img src="/assets/images/posts/death-valley/IMGR23197.JPG" /></p>

<h2 id="wildrose-peak">Wildrose Peak</h2>
<p>Wildrose Peak trailhead is located at the historic Wildrose Charcoal Kilns. The peak is covered in snow in winter, which is a big difference from other hikes in Death Valley.
<img src="/assets/images/posts/death-valley/IMGR22892.JPG" />
<img src="/assets/images/posts/death-valley/IMGR22933.JPG" /></p>

<h2 id="darwin-falls">Darwin Falls</h2>
<p>This is a short and delightful hike. To the end that is close to the Fall, the road is a bit hidden and you would need to do a little climbing. But it is like a tiny oasis in the desert.</p>

<h2 id="golden-canyon-circuit">Golden Canyon circuit</h2>
<p>This is my favorite hike in this trip, especially the second part, which is less frequently visited. You have multiple chances to have an overview of the canyons. Close to the end the canyon, the view opens up all of a sudden in a shockingly amazing way.
<img src="/assets/images/posts/death-valley/IMGR23170.JPG" />
<img src="/assets/images/posts/death-valley/IMGR23192.JPG" /></p>

<h2 id="devils-hole">Devil’s Hole</h2>
<p>We came here to see the unique pupfish. They are tiny rare fishes that are near distinct. The hole is deep and provides a hidden home for the fishes. The mountain around is spotted by red, variously sized cactus, which is exotic.</p>

<h2 id="ash-meadows-national-wildlife-refuge">Ash Meadows National wildlife Refuge</h2>
<p>We stopped by the refuge in the last day of the trip. Not really much there in winter. But we did almost bump into a lynx on the road there. Likely there are plenty more chances to spot wildlife in the warmer seasons.</p>]]></content><author><name>Minmin Jin</name></author><category term="travel" /><summary type="html"><![CDATA[Death Valley is attractive just by its name. In the old times, people who came to this area usually had a difficult time crossing it alive because of its vastness and extreme whether. Even in our trip during the last Christmas, it could be very hot when walking in the sun.]]></summary></entry></feed>